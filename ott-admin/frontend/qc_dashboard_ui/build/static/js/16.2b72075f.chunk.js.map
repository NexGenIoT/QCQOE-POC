{"version":3,"sources":["Routes/qoe/partner-details/index.js","Routes/qoe/experience-insights/PartnerContainer.js"],"names":["createFilterOptions","PartnerDetail","props","dispatch","useDispatch","useEffect","clearAllMetrics","useState","Math","floor","Date","getTime","toDate","setToDate","fromDate","setFromDate","agr","setAgr","sortMatrics","setListNameLocation","location","setLocation","setContentType","setContentPartner","setDevicePlatform","dataDisplay","useSelector","state","qoeReducer","cities","length","getCities","Object","keys","className","localStorage","getItem","onClick","disabled","FilterLayout","metric","getCdn","getContentPartner","val","getContentType","getLocation","temparray","forEach","element","push","split","savePlatformData","cdnVal","contentTypeVal","contentPartnetVal","locationVal","devicePlatform","contentPartner","contentType","updatePlatformData","RealTimeSliderContainer","partnerDetail","UserEngagementSliderContainer","QualityOfExperienceSliderContainer","PartnerContainer"],"mappings":"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","file":"static/js/16.2b72075f.chunk.js","sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\nimport { TextField, MenuItem, ListItem, Button } from \"@material-ui/core\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport RealTimeSliderContainer from 'Components/SliderContainer/RealTimeSliderContainer';\r\nimport UserEngagementSliderContainer from 'Components/SliderContainer/UserEngagementSliderContainer';\r\nimport QualityOfExperienceSliderContainer from 'Components/SliderContainer/QualityOfExperienceSliderContainer';\r\nimport { clearAllMetrics } from 'Store/Actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport LocationFilter from 'Components/QualityExperience/LocationFilter';\r\nimport { getCities } from \"Store/Actions\";\r\nimport { Autocomplete, createFilterOptions } from '@mui/material';\r\nimport { Image } from '@material-ui/icons';\r\nimport FilterLayout from 'Components/QualityExperience/FilterLayout';\r\n\r\nconst filter = createFilterOptions();\r\n\r\n\r\n\r\nexport default function PartnerDetail(props) {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(clearAllMetrics());\r\n    };\r\n  }, [dispatch]);\r\n  const [toDate, setToDate] = useState(Math.floor((new Date()).getTime() / 1000.0));\r\n  const [fromDate, setFromDate] = useState(Math.floor((new Date()).getTime() / 1000.0) - (24 * 3600));\r\n  const [agr, setAgr] = useState('1h');\r\n  const [sortMatrics, setSortMatrics] = useState('all');\r\n  const [listNameLocation, setListNameLocation] = useState([]);\r\n  const [location, setLocation] = useState([]);\r\n  const [contentType, setContentType] = useState([]);\r\n  const [contentPartner, setContentPartner] = useState([]);\r\n  const [devicePlatform, setDevicePlatform] = useState([\"dummy\"]);\r\n  const [locationData, saveLocationData] = useState([]);\r\n  const [checkedItemsLocation, setCheckedItemsLocation] = useState([]);\r\n  const dataDisplay = useSelector((state) => state.qoeReducer);\r\n\r\n\r\n  // const cityarray = [];\r\n  // for (var key in dataDisplay?.cities) {\r\n  //   if (dataDisplay?.cities.hasOwnProperty(key)) {\r\n  //     if (dataDisplay?.cities[key] != NaN) {\r\n  //       var nameabcd = dataDisplay?.cities[key].toString();\r\n  //       var nameed = ([] = nameabcd.split(\",\"));\r\n  //       for (let j of nameed) {\r\n  //         //cityarray.push(j+\"(\"+key+\")\")\r\n  //         cityarray.push(j);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n  const getContentType = (val) => {\r\n    setContentType(val);\r\n  };\r\n  const getContentPartner = (val) => {\r\n    setContentPartner(val);\r\n  };\r\n  const getLocation = (val) => {\r\n\r\n   \r\n    let temparray = [];\r\n    val.forEach((element) => {\r\n      temparray.push(element.split(\"(\")[0]);\r\n    });\r\n    setLocation(temparray);\r\n  };\r\n  const savePlatformData = (val) => {\r\n    setDevicePlatform(val);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (dataDisplay?.cities?.length > 0) {\r\n      return null;\r\n    } else {\r\n      dispatch(getCities(dispatch));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(dataDisplay?.cities)?.length > 0) {\r\n      setListNameLocation(dataDisplay?.cities);\r\n    }\r\n  }, [dataDisplay?.cities]);\r\n\r\n  const handleChange = (event) => {\r\n    // setSortMatrics(event.target.value);\r\n    setLocation(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"detail-wraper\">\r\n      <div className='row'>\r\n        <div className='col-md-3'>\r\n          <h2>{localStorage.getItem('contentPartner')}</h2>\r\n          {/* <Image source={{ uri: 'https://qoe-favorite-screen.s3.amazonaws.com/hungama.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAWZG524Z4CC7IGFSP%2F20220919%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Date=20220919T125850Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=bed94b9d266a573c6351391af78fa8124cd97157614649d802eb054a1b2aba80' }}\r\n            style={{ width: 55, height: 55 }} /> */}\r\n        </div>\r\n        <div className='col-md-9'>\r\n          <div className='monthely-status'>\r\n            <MatButton className={agr === '1h' ? 'Status-btn-active' : ''} onClick={() => {\r\n              setToDate(Math.floor((new Date()).getTime() / 1000.0));\r\n              setFromDate(Math.floor((new Date()).getTime() / 1000.0) - (24 * 3600));\r\n              setAgr('1h');\r\n              setLocation([]);\r\n            }}>24 Hr</MatButton>\r\n            <MatButton className={agr === '1d' ? 'Status-btn-active' : ''} onClick={() => {\r\n              setToDate(Math.floor((new Date()).getTime() / 1000.0));\r\n              setFromDate(Math.floor((new Date()).getTime() / 1000.0) - (7 * 24 * 3600));\r\n              setAgr('1d');\r\n              setLocation([]);\r\n            }}>Weekly</MatButton>\r\n            <MatButton className={agr === '2d' ? 'Status-btn-active' : ''} onClick={() => {\r\n              setToDate(Math.floor((new Date()).getTime() / 1000.0));\r\n              setFromDate(Math.floor((new Date()).getTime() / 1000.0) - (30 * 24 * 3600));\r\n              setAgr('2d');\r\n              setLocation([]);\r\n            }}>Monthly</MatButton>\r\n            <MatButton className={agr === '6d' ? 'Status-btn-active' : ''} onClick={() => {\r\n              setToDate(Math.floor((new Date()).getTime() / 1000.0));\r\n              setFromDate(Math.floor((new Date()).getTime() / 1000.0) - (30 * 3 * 24 * 3600));\r\n              setAgr('6d');\r\n              setLocation([]);\r\n            }} disabled>3 Months</MatButton>\r\n            {/* <TextField\r\n              style={{ width: '20%' }}\r\n              id=\"outlined-select-currency\"\r\n              variant=\"outlined\" fullWidth\r\n              select\r\n              label=\"Select Location\"\r\n              placeholder='Select Location'\r\n              value={location}\r\n              onChange={handleChange}\r\n              className=\"location-Filter\"\r\n            >\r\n              <MenuItem key='all' value='all'>\r\n                All\r\n              </MenuItem>\r\n              {cityarray.map((option, key) => (\r\n                <MenuItem key={option.key} value={option}>\r\n                  {option}\r\n                </MenuItem>\r\n              ))}\r\n\r\n            </TextField> */}\r\n             <FilterLayout\r\n                    metric={sortMatrics}\r\n                    getCdn={[]}\r\n                    getContentPartner={getContentPartner}\r\n                    getContentType={getContentType}\r\n                    getLocation={getLocation}\r\n                    savePlatformData={savePlatformData}\r\n                    cdnVal={[]}\r\n                    contentTypeVal={[]}\r\n                    contentPartnetVal={[]}\r\n                    locationVal={[]}\r\n                    devicePlatform={[]}\r\n                    contentPartner={[]}\r\n                    contentType={[]}\r\n                    location={location}\r\n                    updatePlatformData={[]}\r\n                  />\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n      <RealTimeSliderContainer partnerDetail={true} toDate={toDate} fromDate={fromDate} agr={agr} location={location} />\r\n      <UserEngagementSliderContainer partnerDetail={true} toDate={toDate} fromDate={fromDate} agr={agr} location={location} />\r\n      <QualityOfExperienceSliderContainer partnerDetail={true} toDate={toDate} fromDate={fromDate} agr={agr} location={location} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'  \r\nimport PartnerDetail from 'Routes/qoe/partner-details/index'\r\nexport default function PartnerContainer(){\r\n   return (\r\n      <div className='ecom-dashboard-wrapper'>  \r\n         <PartnerDetail/>\r\n      </div>\r\n   )\r\n}\r\n"],"sourceRoot":""}