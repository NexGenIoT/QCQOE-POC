{"version":3,"sources":["Components/QualityExperience/QualityExperience.js","Components/QualityExperienceContainer.js","Routes/qoe/quality-experience/index.js"],"names":["AssetsOverview","dispatch","useDispatch","realdata","useSelector","state","qoeReducer","metric_type","metricType","metric_type_fullname","metricTypefulname","favorite","favoriteMetric","cdnVal","filters","cdn","contentTypeVal","content_type","contentPartnetVal","content_partner","locationVal","location","useState","metricsList","setMetricList","unit","setUnit","React","isLoadingData","setisLoadingData","setCdn","contentType","setContentType","contentPartner","setContentPartner","setLocation","metric","setMetric","metricHeader","setMetricHeader","aggregationInterval","setAggregationInterval","devicePlatform","setDevicePlatform","Math","floor","Date","getTime","fromDate","setFromDate","toDate","setToDate","updatedGraphData","setUpdatedGraphData","metricGraphPoints","setMetricGraphPoints","allGraphPoints","setAllGraphPoints","androidGraphPoints","setAndroidGraphPoints","iosGraphPoints","setIosGraphPoints","chromeGraphPoints","setChromeGraphPoints","tvGraphPoints","setTvGraphPoints","firestickGraphPoints","setFirestickGraphPoints","AndroidSmartTvGraphPoints","setAndroidSmartTvGraphPoints","androidDataPoints","setAndroidDataPoints","iosDataPoints","setIosDataPoints","chromeDataPoints","setChromeDataPoints","tvDataPoints","setTvDataPoints","firestickDataPoints","setFirestickDataPoints","graphPointsUpdated","setGraphPointsUpdated","selectVal","setSelectVal","xAxis","setXAxis","setisMetricsListLoading","udevicePlatform","updatedDevicePlatform","refresh","setRefresh","AndroidSmartTvDataPoints","setAndroidSmartTvDataPoints","androidDataReport","setAndroidDataReport","iosDataReport","setIosDataReport","webDataReport","setWebDataReport","firestickDataReport","setFirestickDataReport","totalDataReport","setTotalDataReport","AndroidSmartTvDataReport","setAndroidSmartTvDataReport","startDate","endDate","key","range","setRange","openModal","setModalOpen","setStartDate","setEndDate","useEffect","qoe_metrics_name","device_platform","length","updatePlatformData","layout","itemsToRemove","dpl","j","i","splice","calculateDateRange","timestamp","sd","ts","moment","endOf","_d","getLocationWithoutState","val","temparray","forEach","element","push","split","qualityExperiencePageData","console","log","interval","setInterval","fromDateInfo","fetchTheRequest","clearInterval","from_Date","getQualityExperiencePage","undefined","Object","keys","datas","time","monthNames","all","average_bitrate","timestampArr","time_stamp","getMonth","getDate","format","getHours","getMinutes","getSeconds","androidData","iosData","chromeData","tvData","firestickData","AndroidSmartTvData","includes","find","item","Android","datasReport","iOS","Web","FireTV","rebuffering_percentage","Firestick","AndroidSmartTv","totalData","error","getUniqueFilters","getFavoriteMetrics","setMetricType","setMetricTypeFullName","timeGraphDataPoints","handle","useFullScreenHandle","settitle","fullCombinationGraphPoints","lengths","map","a","indexOf","max","className","Paper","TextField","onChange","e","fullData","target","value","data","filter","toLowerCase","id","placeholder","variant","fullWidth","LeftMenu","updateMetricHeader","updateParentMetric","leftMenuMetrics","updateMetric","metricName","Box","sx","width","bgcolor","style","fontSize","fontWeight","textTransform","Stack","direction","spacing","float","IconButton","color","onClick","node","document","querySelector","domtoimage","toPng","quality","then","dataUrl","createElement","href","download","createFileName","click","catch","Tooltip","title","placement","aa","d","index","f","heading","toString","replace","Platform","Timestamp","fileName","exportType","exportFromJSON","types","csv","enter","FormControl","InputLabel","Select","labelId","label","MenuItem","disabled","contentEditable","mx","Modal","isOpen","toggle","centered","ModalHeader","ModalBody","display","flexDirection","justifyContent","selection","ranges","editableDateInputs","moveRangeOnFirstSelection","maxDate","ModalFooter","Button","NotificationManager","marginLeft","FilterLayout","getCdn","getContentPartner","getContentType","getLocation","savePlatformData","getErrorCode","sourceData","AppliedFilters","attemptsData","videoStartFailuresData","exitBeforeVideoStartsData","succesfullPlaysData","removeDevicePlatform","platform","Array","isArray","localStorage","removeItem","final","removeContentPartner","type","removeContentType","removeLocation","handleReload","androidSmartTvDataPoints","androidSmartTvReport","timeGraphPoints","RctPageLoader","SimpleTabs","QualityExperience","CrmDashboard","props"],"mappings":"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","file":"static/js/18.7403afdd.chunk.js","sourcesContent":["/*eslint react-hooks/exhaustive-deps: \"off\"*/\r\nimport * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { createFileName } from \"use-react-screenshot\";\r\nimport LineChartComponent from \"./line-chart\";\r\nimport AppliedFilters from \"./AppliedFilters\";\r\nimport domtoimage from \"dom-to-image\";\r\nimport Box from \"@mui/material/Box\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport FilterLayout from \"./FilterLayout\";\r\nimport LeftMenu from \"./LeftMenu\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport CameraAltOutlinedIcon from \"@mui/icons-material/CameraAltOutlined\";\r\nimport FileDownloadOutlinedIcon from \"@mui/icons-material/FileDownloadOutlined\";\r\nimport FullscreenOutlinedIcon from \"@mui/icons-material/FullscreenOutlined\";\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\nimport RctPageLoader from \"Components/RctPageLoader/RctPageLoader\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport DateRangePicker from \"@mui/lab/DateRangePicker\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport moment from \"moment\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport {\r\n  getFavoriteMetrics,\r\n  getQualityExperiencePage,\r\n  getUniqueFilters,\r\n  setMetricType,\r\n  setMetricTypeFullName,\r\n} from \"Store/Actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport exportFromJSON from \"export-from-json\";\r\nimport { DateRange } from \"react-date-range\";\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nconst AssetsOverview = () => {\r\n  const dispatch = useDispatch();\r\n  const realdata = useSelector((state) => state.qoeReducer);\r\n  const metric_type = realdata?.metricType;\r\n  const metric_type_fullname = realdata?.metricTypefulname;\r\n  const favorite = realdata?.favoriteMetric;\r\n  const cdnVal = realdata?.filters?.cdn;\r\n  const contentTypeVal = realdata?.filters?.content_type;\r\n  const contentPartnetVal = realdata?.filters?.content_partner;\r\n  const locationVal = realdata?.filters?.location;\r\n  const [metricsList, setMetricList] = useState([]);\r\n  const [unit, setUnit] = useState(\"\");\r\n  const [isLoadingData, setisLoadingData] = React.useState(false);\r\n  const [cdn, setCdn] = useState([]);\r\n  const [contentType, setContentType] = useState([]);\r\n  const [contentPartner, setContentPartner] = useState([]);\r\n  const [location, setLocation] = useState([]);\r\n  const [metric, setMetric] = useState(\r\n    metric_type ? metric_type : \"average_framerate\"\r\n  );\r\n  const [metricHeader, setMetricHeader] = useState(\r\n    metric_type_fullname ? metric_type_fullname : \"Average Framerate\"\r\n  );\r\n  const [aggregationInterval, setAggregationInterval] = useState(\"1h\");\r\n  const [devicePlatform, setDevicePlatform] = useState([\"dummy\"]);\r\n  const [fromDate, setFromDate] = useState(\r\n    Math.floor(new Date().getTime() / 1000.0) - 24 * 3600\r\n  );\r\n  const [toDate, setToDate] = useState(\r\n    Math.floor(new Date().getTime() / 1000.0)\r\n  );\r\n  const [updatedGraphData, setUpdatedGraphData] = useState();\r\n  const [metricGraphPoints, setMetricGraphPoints] = useState();\r\n  const [allGraphPoints, setAllGraphPoints] = useState([]);\r\n  const [androidGraphPoints, setAndroidGraphPoints] = useState([]);\r\n  const [iosGraphPoints, setIosGraphPoints] = useState([]);\r\n  const [chromeGraphPoints, setChromeGraphPoints] = useState([]);\r\n  const [tvGraphPoints, setTvGraphPoints] = useState([]);\r\n  const [firestickGraphPoints, setFirestickGraphPoints] = useState([]);\r\n  const [AndroidSmartTvGraphPoints, setAndroidSmartTvGraphPoints] = useState([]);\r\n\r\n  const [androidDataPoints, setAndroidDataPoints] = useState();\r\n  const [iosDataPoints, setIosDataPoints] = useState();\r\n  const [chromeDataPoints, setChromeDataPoints] = useState();\r\n  const [tvDataPoints, setTvDataPoints] = useState();\r\n  const [firestickDataPoints, setFirestickDataPoints] = useState();\r\n  const [graphPointsUpdated, setGraphPointsUpdated] = useState(true);\r\n  const [selectVal, setSelectVal] = useState(\"1d\");\r\n  const [xAxis, setXAxis] = useState(\"hour\");\r\n  const [metricsListLoading, setisMetricsListLoading] = useState(false);\r\n  const [udevicePlatform, updatedDevicePlatform] = useState(devicePlatform);\r\n  const [refresh, setRefresh] = useState(10);\r\n  const [tempLocation, setTempLocation] = useState([]);\r\n  const [AndroidSmartTvDataPoints, setAndroidSmartTvDataPoints] = useState();\r\n\r\n  //fro drop down-------------------\r\n  const [androidDataReport, setAndroidDataReport] = useState();\r\n  const [iosDataReport, setIosDataReport] = useState();\r\n  const [webDataReport, setWebDataReport] = useState();\r\n  const [firestickDataReport, setFirestickDataReport] = useState();\r\n  const [totalDataReport, setTotalDataReport] = useState();\r\n  const [AndroidSmartTvDataReport, setAndroidSmartTvDataReport] = useState([]);\r\n\r\n  //-----------------------------------\r\n\r\n  const [range, setRange] = useState([\r\n    {\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n      key: \"selection\",\r\n    },\r\n  ]);\r\n  const [openModal, setModalOpen] = useState(false);\r\n  const [startDate, setStartDate] = useState();\r\n  const [endDate, setEndDate] = useState();\r\n\r\n  useEffect(() => {\r\n    if (realdata) {\r\n      setMetricList(realdata?.filters?.qoe_metrics_name);\r\n    }\r\n  }, [realdata?.filters?.qoe_metrics_name]);\r\n\r\n  useEffect(() => {\r\n    if (realdata?.device_platform.length > 0) {\r\n      setDevicePlatform(realdata?.device_platform);\r\n    }\r\n  }, [realdata?.device_platform]);\r\n\r\n  const getCdn = (val) => {\r\n    setCdn(val);\r\n  };\r\n  const getContentType = (val) => {\r\n    setContentType(val);\r\n  };\r\n  const getContentPartner = (val) => {\r\n    setContentPartner(val);\r\n  };\r\n  const getLocation = (val) => {\r\n    setLocation(val);\r\n  };\r\n  const updateMetricHeader = (data) => {\r\n    setMetricHeader(data);\r\n  };\r\n  const updateMetric = (metricName) => {\r\n    setXAxis(\"hour\");\r\n    setDevicePlatform(realdata?.device_platform);\r\n    setMetric(metricName);\r\n    setStartDate();\r\n    setEndDate();\r\n    setRange([\r\n      {\r\n        startDate: new Date(),\r\n        endDate: new Date(),\r\n        key: \"selection\",\r\n      },\r\n    ]);\r\n    setFromDate(Math.floor(new Date().getTime() / 1000.0) - 24 * 3600);\r\n    setToDate(Math.floor(new Date().getTime() / 1000.0));\r\n    setAggregationInterval(\"1h\");\r\n    setRefresh(10);\r\n    setSelectVal(\"1d\");\r\n    setIosDataPoints([]);\r\n    setAndroidDataPoints([]);\r\n    setChromeDataPoints([]);\r\n    setFirestickDataPoints([]);\r\n    setTvDataPoints([]);\r\n    setAndroidSmartTvDataPoints([])\r\n\r\n    //reprt---data--------------\r\n    setIosDataReport([]);\r\n    setAndroidDataReport([]);\r\n    setWebDataReport([]);\r\n    setFirestickDataReport([]);\r\n    setAndroidSmartTvDataReport([])\r\n    setTotalDataReport([]);\r\n    //------------------------------\r\n  };\r\n\r\n  const removeContentPartner = (type) => {\r\n    const data = contentPartner;\r\n    const final = data.filter((d) => d !== type);\r\n    setContentPartner(final);\r\n  };\r\n\r\n  const removeContentType = (type) => {\r\n    const dataType = contentType;\r\n    const final = dataType.filter((d) => d !== type);\r\n    setContentType(final);\r\n  };\r\n  const updatePlatformData = (layout, itemsToRemove) => {\r\n    let dpl = devicePlatform;\r\n\r\n    if (layout === \"AppliedFilters\") {\r\n      // remove the elemets you got\r\n      for (var j = 0; j < itemsToRemove.length; j++) {\r\n        for (var i = 0; i < dpl.length; i++) {\r\n          if (dpl[i] === itemsToRemove[j]) {\r\n            dpl.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n      setDevicePlatform(dpl);\r\n    } else if (layout === \"FilterLayout\") {\r\n      // add the element you get\r\n    }\r\n  };\r\n\r\n  const savePlatformData = (val) => {\r\n    setDevicePlatform(val);\r\n  };\r\n\r\n  useEffect(() => {\r\n    updatedDevicePlatform(devicePlatform);\r\n  }, [devicePlatform]);\r\n\r\n  const removeDevicePlatform = (platform) => {\r\n    if (Array.isArray(platform)) {\r\n      setDevicePlatform([]);\r\n      setContentPartner([]);\r\n      setContentType([]);\r\n      localStorage.removeItem(\"contentPartner\");\r\n    } else {\r\n      const dpa = devicePlatform;\r\n      const final = dpa.filter((d) => d !== platform);\r\n      setDevicePlatform(final);\r\n    }\r\n  };\r\n  const removeLocation = (type) => {\r\n    if (Array.isArray(type)) {\r\n      setLocation([]);\r\n    } else {\r\n      const dataType = location;\r\n      const final = dataType.filter((d) => d !== type);\r\n      setLocation(final);\r\n    }\r\n  };\r\n  const changeRefresh = (e) => {\r\n    setRefresh(e.target.value);\r\n  };\r\n\r\n  const setDataRange = (e) => {\r\n    setStartDate();\r\n    setEndDate();\r\n    setRange([\r\n      {\r\n        startDate: new Date(),\r\n        endDate: new Date(),\r\n        key: \"selection\",\r\n      },\r\n    ]);\r\n    setSelectVal(e.target.value);\r\n    let aggrInterval = \"\";\r\n    switch (e.target.value) {\r\n      case \"1min\": {\r\n        aggrInterval = \"10s\";\r\n        setAggregationInterval(aggrInterval);\r\n        setXAxis(\"sec\");\r\n        calculateDateRange(\"1min\");\r\n        return;\r\n      }\r\n      case \"5min\": {\r\n        aggrInterval = \"10s\";\r\n        setAggregationInterval(aggrInterval);\r\n        setXAxis(\"sec\");\r\n        calculateDateRange(\"5min\");\r\n        return;\r\n      }\r\n      case \"1h\": {\r\n        aggrInterval = \"1m\";\r\n        setAggregationInterval(aggrInterval);\r\n        setXAxis(\"hour\");\r\n        calculateDateRange(\"1h\");\r\n        return;\r\n      }\r\n      case \"1d\": {\r\n        aggrInterval = \"1h\";\r\n        setAggregationInterval(aggrInterval);\r\n        setXAxis(\"hour\");\r\n        calculateDateRange(\"1d\");\r\n        return;\r\n      }\r\n      case \"1w\": {\r\n        aggrInterval = \"1d\";\r\n        setAggregationInterval(aggrInterval);\r\n        setXAxis(\"date\");\r\n        calculateDateRange(\"1w\");\r\n        return;\r\n      }\r\n      case \"1m\": {\r\n        aggrInterval = \"2d\";\r\n        setAggregationInterval(aggrInterval);\r\n        setXAxis(\"date\");\r\n        calculateDateRange(\"1m\");\r\n        return;\r\n      }\r\n      case \"1y\": {\r\n        aggrInterval = \"30d\";\r\n        setAggregationInterval(aggrInterval);\r\n        setXAxis(\"date\");\r\n        calculateDateRange(\"1y\");\r\n        return;\r\n      }\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const calculateDateRange = (timestamp) => {\r\n    let sd = new Date(); //current system date\r\n    let toDate = Math.floor(sd.getTime() / 1000.0);\r\n    setToDate(toDate);\r\n    // let ts = Math.floor(new Date().getTime() / 1000);\r\n    let ts = Math.floor(moment().endOf(\"date\")._d.getTime() / 1000.0);\r\n    let fromDateRange;\r\n    switch (timestamp) {\r\n      case \"1min\": {\r\n        fromDateRange = ts - 60;\r\n        setFromDate(fromDateRange);\r\n        return;\r\n      }\r\n      case \"5min\": {\r\n        fromDateRange = ts - 300;\r\n        setFromDate(fromDateRange);\r\n        return;\r\n      }\r\n      case \"1h\": {\r\n        fromDateRange = ts - 3600;\r\n        setFromDate(fromDateRange);\r\n        return;\r\n      }\r\n      case \"1d\": {\r\n        fromDateRange = ts - 24 * 3600;\r\n        setFromDate(fromDateRange);\r\n        return;\r\n      }\r\n      case \"1w\": {\r\n        fromDateRange = ts - 7 * 24 * 3600;\r\n        setFromDate(fromDateRange);\r\n        return;\r\n      }\r\n      case \"1m\": {\r\n        fromDateRange = ts - 30 * 24 * 3600;\r\n        setFromDate(fromDateRange);\r\n        return;\r\n      }\r\n      case \"1y\": {\r\n        fromDateRange = ts - 12 * 30 * 24 * 3600;\r\n        setFromDate(fromDateRange);\r\n        return;\r\n      }\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const getLocationWithoutState = (val) => {\r\n    let temparray = [];\r\n    val.forEach((element) => {\r\n      temparray.push(element.split(\"(\")[0]);\r\n    });\r\n    return temparray;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (realdata && realdata.qualityExperiencePageData) {\r\n      setisLoadingData(false);\r\n      console.log(\"qualityExperiencePageData--\", realdata.qualityExperiencePageData);\r\n      setUpdatedGraphData(realdata.qualityExperiencePageData);\r\n    }\r\n  }, [realdata]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      let ts = Math.floor(new Date().getTime() / 1000);\r\n      let fromDateInfo;\r\n      switch (selectVal) {\r\n        case \"1min\": {\r\n          fromDateInfo = ts - 60;\r\n          break;\r\n        }\r\n        case \"5min\": {\r\n          fromDateInfo = ts - 300;\r\n          break;\r\n        }\r\n        case \"1h\": {\r\n          fromDateInfo = ts - 3600;\r\n          break;\r\n        }\r\n        case \"1d\": {\r\n          fromDateInfo = ts - 24 * 3600;\r\n          break;\r\n        }\r\n        case \"1w\": {\r\n          fromDateInfo = ts - 7 * 24 * 3600;\r\n          break;\r\n        }\r\n        case \"1m\": {\r\n          fromDateInfo = ts - 30 * 24 * 3600;\r\n          break;\r\n        }\r\n        case \"1y\": {\r\n          fromDateInfo = ts - 12 * 30 * 24 * 3600;\r\n          break;\r\n        }\r\n        default:\r\n          break;\r\n      }\r\n\r\n      fetchTheRequest(\r\n        cdn,\r\n        contentType,\r\n        contentPartner,\r\n        getLocationWithoutState(location), //  location,,\r\n        metric,\r\n        startDate ? toDate : ts,\r\n        endDate ? fromDate : fromDateInfo,\r\n        aggregationInterval,\r\n        devicePlatform\r\n      );\r\n    }, refresh * 1000);\r\n    return () => clearInterval(interval);\r\n  }, [\r\n    refresh,\r\n    cdn,\r\n    contentType,\r\n    contentPartner,\r\n    location,\r\n    metric,\r\n    toDate,\r\n    fromDate,\r\n    aggregationInterval,\r\n    devicePlatform,\r\n  ]);\r\n\r\n  const fetchTheRequest = (\r\n    cdn,\r\n    contentType,\r\n    contentPartner,\r\n    location,\r\n    metric,\r\n    toDate,\r\n    from_Date,\r\n    aggregationInterval,\r\n    devicePlatform\r\n  ) => {\r\n\r\n    setAndroidGraphPoints([]);\r\n    setIosGraphPoints([]);\r\n    setChromeGraphPoints([]);\r\n    setAllGraphPoints([]);\r\n    setTvGraphPoints([]);\r\n    setFirestickGraphPoints([]);\r\n    setAndroidSmartTvGraphPoints([])\r\n    setisLoadingData(true);\r\n    if (devicePlatform[0] === \"dummy\") {\r\n      return null;\r\n    }\r\n    dispatch(\r\n      getQualityExperiencePage(\r\n        dispatch,\r\n        cdn,\r\n        contentType,\r\n        contentPartner,\r\n        getLocationWithoutState(location), //  location,\r\n        metric,\r\n        toDate,\r\n        from_Date,\r\n        aggregationInterval,\r\n        devicePlatform\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleReload = () => {\r\n    let ts = Math.floor(new Date().getTime() / 1000);\r\n    let fromDateInfo;\r\n    switch (selectVal) {\r\n      case \"1min\": {\r\n        fromDateInfo = ts - 60;\r\n        break;\r\n      }\r\n      case \"5min\": {\r\n        fromDateInfo = ts - 300;\r\n        break;\r\n      }\r\n      case \"1h\": {\r\n        fromDateInfo = ts - 3600;\r\n        break;\r\n      }\r\n      case \"1d\": {\r\n        fromDateInfo = ts - 24 * 3600;\r\n        break;\r\n      }\r\n      case \"1w\": {\r\n        fromDateInfo = ts - 7 * 24 * 3600;\r\n        break;\r\n      }\r\n      case \"1m\": {\r\n        fromDateInfo = ts - 30 * 24 * 3600;\r\n        break;\r\n      }\r\n      case \"1y\": {\r\n        fromDateInfo = ts - 12 * 30 * 24 * 3600;\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n    fetchTheRequest(\r\n      cdn,\r\n      contentType,\r\n      contentPartner,\r\n      getLocationWithoutState(location), //  location,\r\n      metric,\r\n      startDate ? toDate : ts,\r\n      endDate ? fromDate : fromDateInfo,\r\n      aggregationInterval,\r\n      devicePlatform\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    let ts = Math.floor(new Date().getTime() / 1000);\r\n    let fromDateInfo;\r\n    switch (selectVal) {\r\n      case \"1min\": {\r\n        fromDateInfo = ts - 60;\r\n        break;\r\n      }\r\n      case \"5min\": {\r\n        fromDateInfo = ts - 300;\r\n        break;\r\n      }\r\n      case \"1h\": {\r\n        fromDateInfo = ts - 3600;\r\n        break;\r\n      }\r\n      case \"1d\": {\r\n        fromDateInfo = ts - 24 * 3600;\r\n        break;\r\n      }\r\n      case \"1w\": {\r\n        fromDateInfo = ts - 7 * 24 * 3600;\r\n        break;\r\n      }\r\n      case \"1m\": {\r\n        fromDateInfo = ts - 30 * 24 * 3600;\r\n        break;\r\n      }\r\n      case \"1y\": {\r\n        fromDateInfo = ts - 12 * 30 * 24 * 3600;\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n    fetchTheRequest(\r\n      cdn,\r\n      contentType,\r\n      contentPartner,\r\n      location,\r\n      metric,\r\n      toDate,\r\n      startDate && endDate ? fromDate : fromDateInfo,\r\n      aggregationInterval,\r\n      devicePlatform\r\n    );\r\n  }, [\r\n    cdn,\r\n    contentType,\r\n    contentPartner,\r\n    location,\r\n    metric,\r\n    toDate,\r\n    fromDate,\r\n    aggregationInterval,\r\n    devicePlatform,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (updatedGraphData == undefined) {\r\n      return;\r\n    }\r\n\r\n    if (Object.keys(updatedGraphData).length > 0) {\r\n      //setisLoadingData(true);\r\n      let datas = [];\r\n      let time = [];\r\n      setGraphPointsUpdated(false);\r\n      const monthNames = [\r\n        \"Jan\",\r\n        \"Feb\",\r\n        \"Mar\",\r\n        \"Apr\",\r\n        \"May\",\r\n        \"Jun\",\r\n        \"Jul\",\r\n        \"Aug\",\r\n        \"Sep\",\r\n        \"Oct\",\r\n        \"Nov\",\r\n        \"Dec\",\r\n      ];\r\n      if (devicePlatform) {\r\n        if (devicePlatform.length === 0) {\r\n          datas =\r\n            metric && metric.length !== 0\r\n              ? updatedGraphData[0].all[metric]\r\n              : updatedGraphData[0].all.average_bitrate;\r\n          let timestampArr = updatedGraphData[0].all.time_stamp;\r\n          setUnit(updatedGraphData[0].all.unit);\r\n          for (let i = 0; i < timestampArr.length; i++) {\r\n            if (xAxis === \"hour\")\r\n              time.push(\r\n                monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                \" \" +\r\n                new Date(timestampArr[i]).getDate() +\r\n                \",\" +\r\n                moment(timestampArr[i]).format(\"hh:mm\")\r\n              );\r\n            else if (xAxis === \"date\")\r\n              time.push(\r\n                monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                \" \" +\r\n                new Date(timestampArr[i]).getDate()\r\n              );\r\n            else if (xAxis === \"sec\")\r\n              time.push(\r\n                monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                \" \" +\r\n                new Date(timestampArr[i]).getDate() +\r\n                \",\" +\r\n                new Date(timestampArr[i]).getHours() +\r\n                \":\" +\r\n                new Date(timestampArr[i]).getMinutes() +\r\n                \":\" +\r\n                new Date(timestampArr[i]).getSeconds()\r\n              );\r\n          }\r\n          setAllGraphPoints(time);\r\n          setMetricGraphPoints(datas);\r\n        } else {\r\n          let androidData;\r\n          let iosData;\r\n          let chromeData;\r\n          let tvData;\r\n          let firestickData;\r\n          let AndroidSmartTvData;\r\n\r\n          if (devicePlatform.includes(\"Android\")) {\r\n            androidData = updatedGraphData.find((item) => item.Android);\r\n            console.log(\"abcd--\", androidData);\r\n            if (androidData) {\r\n              let datas = [];\r\n              let time = [];\r\n              //report data platform wise\r\n              let datasReport = 0;\r\n              datasReport =\r\n                metric && metric.length !== 0\r\n                  ? androidData.Android[\"total_sum\"]\r\n                  : androidData.Android.total_sum;\r\n              //report data platform wise\r\n\r\n              datas =\r\n                metric && metric.length !== 0\r\n                  ? androidData.Android[metric]\r\n                  : androidData.Android.average_bitrate;\r\n              let timestampArr = androidData.Android.time_stamp;\r\n              setUnit(androidData.Android.unit);\r\n              for (let i = 0; i < timestampArr.length; i++) {\r\n                if (xAxis === \"hour\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    moment(timestampArr[i]).format(\"hh:mm\")\r\n                  );\r\n                else if (xAxis === \"date\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate()\r\n                  );\r\n                else if (xAxis === \"sec\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    new Date(timestampArr[i]).getHours() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getMinutes() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getSeconds()\r\n                  );\r\n              }\r\n              setAndroidGraphPoints(time);\r\n              setAndroidDataPoints(datas);\r\n              setAndroidDataReport(datasReport)\r\n            }\r\n          }\r\n          if (devicePlatform.includes(\"iOS\")) {\r\n            iosData = updatedGraphData.find((item) => item.iOS);\r\n            if (iosData) {\r\n              let datas = [];\r\n              let time = [];\r\n              //report data platform wise\r\n              let datasReport = 0;\r\n              datasReport =\r\n                metric && metric.length !== 0\r\n                  ? iosData.iOS[\"total_sum\"]\r\n                  : iosData.iOS.total_sum;\r\n              //report data platform wise\r\n              datas =\r\n                metric && metric.length !== 0\r\n                  ? iosData.iOS[metric]\r\n                  : iosData.iOS.average_bitrate;\r\n              let timestampArr = iosData.iOS.time_stamp;\r\n              setUnit(iosData.iOS.unit);\r\n              for (let i = 0; i < timestampArr.length; i++) {\r\n                if (xAxis === \"hour\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    moment(timestampArr[i]).format(\"hh:mm\")\r\n                  );\r\n                else if (xAxis === \"date\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate()\r\n                  );\r\n                else if (xAxis === \"sec\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    new Date(timestampArr[i]).getHours() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getMinutes() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getSeconds()\r\n                  );\r\n              }\r\n              setIosGraphPoints(time);\r\n              setIosDataPoints(datas);\r\n              setIosDataReport(datasReport)\r\n            }\r\n          }\r\n          if (devicePlatform.includes(\"Web\")) {\r\n            chromeData = updatedGraphData.find((item) => item.Web);\r\n            if (chromeData) {\r\n              let datas = [];\r\n              let time = [];\r\n              //report data platform wise\r\n              let datasReport = 0;\r\n              datasReport =\r\n                metric && metric.length !== 0\r\n                  ? chromeData.Web[\"total_sum\"]\r\n                  : chromeData.Web.total_sum;\r\n              //report data platform wise\r\n              datas =\r\n                metric && metric.length !== 0\r\n                  ? chromeData.Web[metric]\r\n                  : chromeData.Web.average_bitrate;\r\n              let timestampArr = chromeData.Web.time_stamp;\r\n              setUnit(chromeData.Web.unit);\r\n              for (let i = 0; i < timestampArr.length; i++) {\r\n                if (xAxis === \"hour\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    moment(timestampArr[i]).format(\"hh:mm\")\r\n                  );\r\n                else if (xAxis === \"date\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate()\r\n                  );\r\n                else if (xAxis === \"sec\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    new Date(timestampArr[i]).getHours() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getMinutes() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getSeconds()\r\n                  );\r\n              }\r\n              setChromeGraphPoints(time);\r\n              setChromeDataPoints(datas);\r\n              setWebDataReport(datasReport)\r\n            }\r\n          }\r\n          if (devicePlatform.includes(\"FireTV\")) {\r\n            tvData = updatedGraphData.find((item) => item.FireTV);\r\n            if (tvData) {\r\n              let datas = [];\r\n              let time = [];\r\n              datas =\r\n                metric && metric.length !== 0\r\n                  ? tvData.FireTV[metric]\r\n                  : tvData.FireTV.rebuffering_percentage;\r\n              let timestampArr = tvData.FireTV.time_stamp;\r\n              setUnit(tvData.FireTV.unit);\r\n              for (let i = 0; i < timestampArr.length; i++) {\r\n                if (xAxis === \"hour\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    moment(timestampArr[i]).format(\"hh:mm\")\r\n                  );\r\n                else if (xAxis === \"date\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate()\r\n                  );\r\n                else if (xAxis === \"sec\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    new Date(timestampArr[i]).getHours() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getMinutes() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getSeconds()\r\n                  );\r\n              }\r\n              setTvGraphPoints(time);\r\n              setTvDataPoints(datas);\r\n            }\r\n          }\r\n          if (devicePlatform.includes(\"Firestick\")) {\r\n            firestickData = updatedGraphData.find((item) => item.Firestick);\r\n            if (firestickData) {\r\n              let datas = [];\r\n              let time = [];\r\n\r\n              //report data platform wise\r\n              let datasReport = 0;\r\n              datasReport =\r\n                metric && metric.length !== 0\r\n                  ? firestickData.Firestick[\"total_sum\"]\r\n                  : firestickData.Firestick.total_sum;\r\n              //report data platform wise\r\n              datas =\r\n                metric && metric.length !== 0\r\n                  ? firestickData.Firestick[metric]\r\n                  : firestickData.Firestick.rebuffering_percentage;\r\n              let timestampArr = firestickData.Firestick.time_stamp;\r\n              setUnit(firestickData.Firestick.unit);\r\n              for (let i = 0; i < timestampArr.length; i++) {\r\n                if (xAxis === \"hour\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    moment(timestampArr[i]).format(\"hh:mm\")\r\n                  );\r\n                else if (xAxis === \"date\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate()\r\n                  );\r\n                else if (xAxis === \"sec\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    new Date(timestampArr[i]).getHours() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getMinutes() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getSeconds()\r\n                  );\r\n              }\r\n              setFirestickGraphPoints(time);\r\n              setFirestickDataPoints(datas);\r\n              setFirestickDataReport(datasReport)\r\n            }\r\n          }\r\n          if (devicePlatform.includes(\"AndroidSmartTv\")) {\r\n            AndroidSmartTvData = updatedGraphData?.find((item) => item.AndroidSmartTv);\r\n            if (AndroidSmartTvData) {\r\n              let datas = [];\r\n              let time = [];\r\n\r\n              //report data platform wise\r\n              let datasReport = 0;\r\n              datasReport =\r\n                metric && metric.length !== 0\r\n                  ? AndroidSmartTvData.AndroidSmartTv[\"total_sum\"]\r\n                  : AndroidSmartTvData.AndroidSmartTv.total_sum;\r\n              //report data platform wise\r\n              datas =\r\n                metric && metric.length !== 0\r\n                  ? AndroidSmartTvData.AndroidSmartTv[metric]\r\n                  : AndroidSmartTvData.AndroidSmartTv.rebuffering_percentage;\r\n\r\n              let timestampArr = AndroidSmartTvData.AndroidSmartTv.time_stamp;\r\n\r\n              setUnit(AndroidSmartTvData.AndroidSmartTv.unit);\r\n              for (let i = 0; i < timestampArr.length; i++) {\r\n                if (xAxis === \"hour\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    moment(timestampArr[i]).format(\"hh:mm\")\r\n                  );\r\n                else if (xAxis === \"date\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate()\r\n                  );\r\n                else if (xAxis === \"sec\")\r\n                  time.push(\r\n                    monthNames[new Date(timestampArr[i]).getMonth()] +\r\n                    \" \" +\r\n                    new Date(timestampArr[i]).getDate() +\r\n                    \",\" +\r\n                    new Date(timestampArr[i]).getHours() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getMinutes() +\r\n                    \":\" +\r\n                    new Date(timestampArr[i]).getSeconds()\r\n                  );\r\n              }\r\n              setAndroidSmartTvGraphPoints(time);\r\n              setAndroidSmartTvDataPoints(datas);\r\n              setAndroidSmartTvDataReport(datasReport)\r\n            }\r\n          }\r\n\r\n          try {\r\n            let totalData = updatedGraphData.find((item) => item.all);\r\n            //report data platform wise\r\n            let datasReport = 0;\r\n            datasReport =\r\n              metric && metric.length !== 0\r\n                ? totalData.all[\"total_sum\"]\r\n                : totalData.all.total_sum;\r\n            setTotalDataReport(datasReport)\r\n            //report data platform wise\r\n          } catch (error) {\r\n\r\n          }\r\n          // if()\r\n\r\n\r\n\r\n        }\r\n        setGraphPointsUpdated(true);\r\n      }\r\n    }\r\n  }, [updatedGraphData]);\r\n\r\n  useEffect(() => {\r\n    const isEmpty = Object.keys(realdata?.filters).length === 0;\r\n    if (isEmpty) {\r\n      setisMetricsListLoading(true);\r\n      dispatch(getUniqueFilters(dispatch));\r\n      setisMetricsListLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!favorite) {\r\n      dispatch(getFavoriteMetrics(dispatch));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(setMetricType(\"\"));\r\n      dispatch(setMetricTypeFullName(\"\"));\r\n\r\n    };\r\n  }, []);\r\n\r\n  const handle = useFullScreenHandle();\r\n  // console.log(\"metric name--\",metricHeader);\r\n  const gettitle = metricHeader;\r\n  var settitle = gettitle//.replace(/_/g, \" \");\r\n\r\n  let timeGraphDataPoints;\r\n  let fullCombinationGraphPoints = [];\r\n  fullCombinationGraphPoints.push(\r\n    androidGraphPoints,\r\n    iosGraphPoints,\r\n    chromeGraphPoints,\r\n    tvGraphPoints,\r\n    firestickGraphPoints,\r\n    allGraphPoints,\r\n    AndroidSmartTvGraphPoints,\r\n\r\n  );\r\n  const lengths = fullCombinationGraphPoints.map((a) => a.length);\r\n  const index = lengths.indexOf(Math.max(...lengths));\r\n  timeGraphDataPoints = fullCombinationGraphPoints[index];\r\n\r\n  const getImage = () => {\r\n    var node = document.querySelector(\".take-screenshot\");\r\n    var options = {\r\n      quality: 1,\r\n      bgcolor: \"#ffffff\",\r\n    };\r\n    domtoimage\r\n      .toPng(node, options)\r\n      .then(function (dataUrl) {\r\n        const a = document.createElement(\"a\");\r\n        a.href = dataUrl;\r\n        a.download = createFileName(\r\n          \"png\",\r\n          `${metric}-${moment().format(\"DD/MM/YYYY\")}`\r\n        );\r\n        a.click();\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"oops, something went wrong!\", error);\r\n      });\r\n  };\r\n\r\n  const searchMetricName = (e) => {\r\n    const fullData = realdata?.filters?.qoe_metrics_name;\r\n    if (e.target.value !== \"\") {\r\n      const data = fullData.filter((a) =>\r\n        a.toLowerCase().includes(e.target.value.toLowerCase())\r\n      );\r\n      setMetricList(data);\r\n    } else {\r\n      setMetricList(fullData);\r\n    }\r\n  };\r\n\r\n  const getExcelDownload = () => {\r\n    const data = [];\r\n    realdata.qualityExperiencePageData.map((aa) => {\r\n      if (Object.keys(aa).includes(\"Android\")) {\r\n        return aa[Object.keys(aa)[0]].time_stamp.map((d, index) => {\r\n          let key = Object.keys(aa[Object.keys(aa)[0]]).filter(\r\n            (f) => f === metric\r\n          );\r\n          const heading = key.toString().replace(/_/g, \" \");\r\n          return data.push({\r\n            Platform: Object.keys(aa)[0],\r\n            Timestamp: aa[Object.keys(aa)[0]].time_stamp[index],\r\n            [heading]: aa[Object.keys(aa)[0]][key][index],\r\n            Unit: aa[Object.keys(aa)[0]].unit,\r\n          });\r\n        });\r\n      } else if (Object.keys(aa).includes(\"iOS\")) {\r\n        return aa[Object.keys(aa)[0]].time_stamp.map((d, index) => {\r\n          let key = Object.keys(aa[Object.keys(aa)[0]]).filter(\r\n            (f) => f === metric\r\n          );\r\n          const heading = key.toString().replace(/_/g, \" \");\r\n          return data.push({\r\n            Platform: Object.keys(aa)[0],\r\n            Timestamp: aa[Object.keys(aa)[0]].time_stamp[index],\r\n            [heading]: aa[Object.keys(aa)[0]][key][index],\r\n            Unit: aa[Object.keys(aa)[0]].unit,\r\n          });\r\n        });\r\n      } else if (Object.keys(aa).includes(\"Web\")) {\r\n        return aa[Object.keys(aa)[0]].time_stamp.map((d, index) => {\r\n          let key = Object.keys(aa[Object.keys(aa)[0]]).filter(\r\n            (f) => f === metric\r\n          );\r\n          const heading = key.toString().replace(/_/g, \" \");\r\n          return data.push({\r\n            Platform: Object.keys(aa)[0],\r\n            Timestamp: aa[Object.keys(aa)[0]].time_stamp[index],\r\n            [heading]: aa[Object.keys(aa)[0]][key][index],\r\n            Unit: aa[Object.keys(aa)[0]].unit,\r\n          });\r\n        });\r\n      } else if (Object.keys(aa).includes(\"tv\")) {\r\n        return aa[Object.keys(aa)[0]].time_stamp.map((d, index) => {\r\n          let key = Object.keys(aa[Object.keys(aa)[0]]).filter(\r\n            (f) => f === metric\r\n          );\r\n          const heading = key.toString().replace(/_/g, \" \");\r\n          return data.push({\r\n            Platform: Object.keys(aa)[0],\r\n            Timestamp: aa[Object.keys(aa)[0]].time_stamp[index],\r\n            [heading]: aa[Object.keys(aa)[0]][key][index],\r\n            Unit: aa[Object.keys(aa)[0]].unit,\r\n          });\r\n        });\r\n      } else if (Object.keys(aa).includes(\"Firestick\")) {\r\n        return aa[Object.keys(aa)[0]].time_stamp.map((d, index) => {\r\n          let key = Object.keys(aa[Object.keys(aa)[0]]).filter(\r\n            (f) => f === metric\r\n          );\r\n          const heading = key.toString().replace(/_/g, \" \");\r\n          return data.push({\r\n            Platform: Object.keys(aa)[0],\r\n            Timestamp: aa[Object.keys(aa)[0]].time_stamp[index],\r\n            [heading]: aa[Object.keys(aa)[0]][key][index],\r\n            Unit: aa[Object.keys(aa)[0]].unit,\r\n          });\r\n        });\r\n      } else if (Object.keys(aa).includes(\"AndroidSmartTv\")) {\r\n        return aa[Object.keys(aa)[0]].time_stamp.map((d, index) => {\r\n          let key = Object.keys(aa[Object.keys(aa)[0]]).filter(\r\n            (f) => f === metric\r\n          );\r\n          const heading = key.toString().replace(/_/g, \" \");\r\n          return data.push({\r\n            Platform: Object.keys(aa)[0],\r\n            Timestamp: aa[Object.keys(aa)[0]].time_stamp[index],\r\n            [heading]: aa[Object.keys(aa)[0]][key][index],\r\n            Unit: aa[Object.keys(aa)[0]].unit,\r\n          });\r\n        });\r\n      }else if (Object.keys(aa).includes(\"all\")) {\r\n        return aa[Object.keys(aa)[0]].time_stamp.map((d, index) => {\r\n          let key = Object.keys(aa[Object.keys(aa)[0]]).filter(\r\n            (f) => f === metric\r\n          );\r\n          const heading = key.toString().replace(/_/g, \" \");\r\n          return data.push({\r\n            Platform: Object.keys(aa)[0],\r\n            Timestamp: aa[Object.keys(aa)[0]].time_stamp[index],\r\n            [heading]: aa[Object.keys(aa)[0]][key][index],\r\n            Unit: aa[Object.keys(aa)[0]].unit,\r\n          });\r\n        });\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n    const fileName = createFileName(\r\n      \"csv\",\r\n      `${metric}-${moment().format(\"DD/MM/YYYY\")}`\r\n    );\r\n    const exportType = exportFromJSON.types.csv;\r\n    exportFromJSON({ data, fileName, exportType });\r\n  };\r\n  const submit = () => {\r\n    let diff = ((range[0].endDate - range[0].startDate) / (1000 * 60 * 60 * 24) + 1) % 365\r\n    if (diff > 31) {\r\n\t\t\tNotificationManager.error(\"To-Date and From-Date Should be of 31 days of Gap\", \"\", 2000)\r\n\t\t\treturn;\r\n\t\t}\r\n    setSelectVal(range[0])\r\n    setXAxis(\"date\");\r\n    setStartDate(range[0].startDate);\r\n    setEndDate(range[0].endDate);\r\n    setModalOpen(false);\r\n    setToDate(\r\n      Math.floor(moment(range[0].endDate).endOf(\"date\")._d.getTime() / 1000.0)\r\n    );\r\n    setAggregationInterval(\"1d\");\r\n    setFromDate(Math.floor(range[0].startDate.getTime() / 1000.0));\r\n  };\r\n  const updateParentMetric = () => { };\r\n  return (\r\n    <>\r\n      <div className='row'>\r\n        <div className='col-md-3'>\r\n          <Paper className='SidePanel'>\r\n            <h3 className='left-menu-title'>QUALITY OF EXPERIENCE</h3>\r\n            <div className='analysisHeaderRight search-insight-container'>\r\n              <i className='zmdi zmdi-search'></i>\r\n              <TextField\r\n                onChange={searchMetricName}\r\n                id='outlined-basic'\r\n                className='search-insight'\r\n                placeholder='Search...'\r\n                variant='outlined'\r\n                fullWidth\r\n              />\r\n            </div>\r\n            {/* {!metricsListLoading && metricsList ? ( */}\r\n            <LeftMenu\r\n              updateMetricHeader={updateMetricHeader}\r\n              updateParentMetric={updateParentMetric}\r\n              favorite={favorite}\r\n              leftMenuMetrics={metricsList}\r\n              updateMetric={updateMetric}\r\n            />\r\n            {/* // ) : (\r\n            //   <RctPageLoader />\r\n            // )} */}\r\n          </Paper>\r\n        </div>\r\n        <div className='col-md-9 right-insight'>\r\n          <Box sx={{ width: \"100%\", bgcolor: \"background.paper\" }}>\r\n            <Paper>\r\n              <div className='graphcontentHead'>\r\n                <span\r\n                  style={{\r\n                    fontSize: \"18px\",\r\n                    fontWeight: 500,\r\n                    textTransform: \"capitalize\",\r\n                  }}\r\n                >\r\n                  {metricHeader}\r\n                </span>\r\n                <Stack direction='row' spacing={1} sx={{ float: \"right\" }}>\r\n                  <IconButton\r\n                    color='primary'\r\n                    aria-label='screenshot'\r\n                    onClick={getImage}\r\n                  >\r\n                    <Tooltip title='Take screenshot' placement='bottom'>\r\n                      <CameraAltOutlinedIcon color='disabled' />\r\n                    </Tooltip>\r\n                  </IconButton>\r\n                  <IconButton\r\n                    color='secondary'\r\n                    aria-label='download'\r\n                    onClick={getExcelDownload}\r\n                  >\r\n                    <Tooltip title='Download File' placement='bottom'>\r\n                      <FileDownloadOutlinedIcon color='disabled' />\r\n                    </Tooltip>\r\n                  </IconButton>\r\n                  <IconButton aria-label='fullscreen' onClick={handle.enter}>\r\n                    <Tooltip title='Full Screen' placement='bottom'>\r\n                      <FullscreenOutlinedIcon color='disabled' />\r\n                    </Tooltip>\r\n                  </IconButton>\r\n                  <Box className='dropdownCont'>\r\n                    <FormControl fullWidth className='intervalSelect'>\r\n                      <InputLabel id='intervalSelect'>Interval</InputLabel>\r\n                      <Select\r\n                        labelId='intervalSelect'\r\n                        id='demo-simple-select'\r\n                        value={refresh}\r\n                        label='Interval'\r\n                        onChange={changeRefresh}\r\n                        className='interSelect'\r\n                      >\r\n                        <MenuItem value={10}>10s</MenuItem>\r\n                        <MenuItem value={20}>20s</MenuItem>\r\n                        <MenuItem value={30}>30s</MenuItem>\r\n                        <MenuItem value={40}>40s</MenuItem>\r\n                        <MenuItem value={50}>50s</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                    <FormControl fullWidth className='intervalSelect'>\r\n                      <InputLabel id='intervalSelect'>Interval</InputLabel>\r\n                      <Select\r\n                        labelId='intervalSelect'\r\n                        id='demo-simple-select'\r\n                        label='Interval'\r\n                        value={selectVal}\r\n                        onChange={setDataRange}\r\n                        className='interSelect'\r\n                      >\r\n\r\n                        <MenuItem value='5min'>5 Minute</MenuItem>\r\n                        <MenuItem value='1h'>1 Hour</MenuItem>\r\n                        <MenuItem value='1d'>Day</MenuItem>\r\n                        <MenuItem value='1w'>Week</MenuItem>\r\n                        <MenuItem value='1m'>Month</MenuItem>\r\n                        <MenuItem value='1y' disabled>Year</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n\r\n                    <div className='dateCont'>\r\n                      <span>Custom Date</span>\r\n                      <TextField\r\n                        onClick={() => setModalOpen(true)}\r\n                        contentEditable={false}\r\n                        value={\r\n                          startDate\r\n                            ? moment(startDate).format(\"DD/MM/YYYY\")\r\n                            : \"\"\r\n                        }\r\n                        placeholder='dd-mm-yyyy'\r\n                      />\r\n                      <Box sx={{ mx: 2 }}> to </Box>\r\n                      <TextField\r\n                        onClick={() => setModalOpen(true)}\r\n                        contentEditable={false}\r\n                        value={\r\n                          endDate ? moment(endDate).format(\"DD/MM/YYYY\") : \"\"\r\n                        }\r\n                        placeholder='dd-mm-yyyy'\r\n                      />\r\n                    </div>\r\n                    <Modal\r\n                      isOpen={openModal}\r\n                      toggle={() => setModalOpen(false)}\r\n                      centered\r\n                    >\r\n                      <ModalHeader>\r\n                        <h3>Date Picker</h3>\r\n                      </ModalHeader>\r\n                      <ModalBody>\r\n                        <div\r\n                          style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            justifyContent: \"center\",\r\n                          }}\r\n                        >\r\n                          <DateRange\r\n                            onChange={(item) => setRange([item.selection])}\r\n                            ranges={range}\r\n                            editableDateInputs={true}\r\n                            moveRangeOnFirstSelection={false}\r\n                            maxDate={new Date()}\r\n                          />\r\n                        </div>\r\n                      </ModalBody>\r\n                      <ModalFooter>\r\n                        <div>\r\n                          <Button\r\n                            onClick={() => setModalOpen(false)}\r\n                            variant='contained'\r\n                            className='btn-danger text-white bg-danger'\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                          <Button\r\n                            onClick={submit}\r\n                            variant='contained'\r\n                            color='primary'\r\n                            className='text-white bg-primary'\r\n                            style={{ marginLeft: 10 }}\r\n\r\n                          >\r\n                            Submit\r\n                          </Button>\r\n\r\n                        </div>\r\n                      </ModalFooter>\r\n                    </Modal>\r\n                  </Box>\r\n                  <FilterLayout\r\n                    metric={metric}\r\n                    getCdn={getCdn}\r\n                    getContentPartner={getContentPartner}\r\n                    getContentType={getContentType}\r\n                    getLocation={getLocation}\r\n                    savePlatformData={savePlatformData}\r\n                    getErrorCode={[]}\r\n                    cdnVal={cdnVal}\r\n                    contentTypeVal={contentTypeVal}\r\n                    contentPartnetVal={contentPartnetVal}\r\n                    locationVal={locationVal}\r\n                    devicePlatform={devicePlatform}\r\n                    contentPartner={contentPartner}\r\n                    contentType={contentType}\r\n                    location={location}\r\n                    updatePlatformData={updatePlatformData}\r\n                    sourceData={[]}\r\n                  />\r\n                </Stack>\r\n              </div>\r\n              <div className='take-screenshot'>\r\n                <AppliedFilters\r\n                  attemptsData={[]}\r\n                  videoStartFailuresData={[]}\r\n                  exitBeforeVideoStartsData={[]}\r\n                  succesfullPlaysData={[]}\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  metric={metric}\r\n                  removeDevicePlatform={removeDevicePlatform}\r\n                  removeContentPartner={removeContentPartner}\r\n                  removeContentType={removeContentType}\r\n                  removeLocation={removeLocation}\r\n                  devicePlatform={devicePlatform}\r\n                  updatePlatformData={updatePlatformData}\r\n                  handleReload={handleReload}\r\n                  udevicePlatform={udevicePlatform}\r\n                  contentPartner={contentPartner}\r\n                  contentType={contentType}\r\n                  location={location}\r\n                  selectVal={selectVal}\r\n                  androidDataPoints={\r\n                    devicePlatform?.includes(\"Android\")\r\n                      ? androidDataPoints\r\n                      : [0]\r\n                  }\r\n                  iosDataPoints={\r\n                    devicePlatform?.includes(\"iOS\") ? iosDataPoints : [0]\r\n                  }\r\n                  chromeDataPoints={\r\n                    devicePlatform?.includes(\"Web\") ? chromeDataPoints : [0]\r\n                  }\r\n                  tvDataPoints={\r\n                    devicePlatform?.includes(\"FireTV\") ? tvDataPoints : [0]\r\n                  }\r\n                  firestickDataPoints={\r\n                    devicePlatform?.includes(\"Firestick\")\r\n                      ? firestickDataPoints\r\n                      : [0]\r\n                  }\r\n                  androidSmartTvDataPoints={\r\n                    devicePlatform?.includes(\"AndroidSmartTv\")\r\n                      ? AndroidSmartTvDataPoints\r\n                      : [0]\r\n                  }\r\n                  androidSmartTvReport={AndroidSmartTvDataReport?AndroidSmartTvDataReport:0}\r\n                  androidDataReport={androidDataReport ? androidDataReport : 0}\r\n                  iosDataReport={iosDataReport ? iosDataReport : 0}\r\n                  firestickDataReport={firestickDataReport ? firestickDataReport : 0}\r\n                  webDataReport={webDataReport ? webDataReport : 0}\r\n                  totalDataReport={totalDataReport ? totalDataReport : 0}\r\n                />\r\n                <FullScreen handle={handle}>\r\n                  <div className='chartCont'>\r\n                    {timeGraphDataPoints &&\r\n                      graphPointsUpdated &&\r\n                      !isLoadingData ? (\r\n                      <LineChartComponent\r\n                        selectVal={selectVal}\r\n                        timeGraphPoints={timeGraphDataPoints}\r\n                        metricGraphPoints={\r\n                          metricGraphPoints ? metricGraphPoints : []\r\n                        }\r\n                        androidDataPoints={androidDataPoints}\r\n                        iosDataPoints={iosDataPoints}\r\n                        chromeDataPoints={chromeDataPoints}\r\n                        tvDataPoints={tvDataPoints}\r\n                        firestickDataPoints={firestickDataPoints}\r\n                        graphPointsUpdated={graphPointsUpdated}\r\n                        isLoadingData={isLoadingData}\r\n                        settitle={settitle}\r\n                        unit={unit}\r\n                        devicePlatform={devicePlatform}\r\n                        androidSmartTvDataPoints={AndroidSmartTvDataPoints}\r\n                      />\r\n                    ) : (\r\n                      <RctPageLoader />\r\n                    )}\r\n                  </div>\r\n                </FullScreen>\r\n              </div>\r\n            </Paper>\r\n          </Box>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AssetsOverview;\r\n","/**\r\n * Basic Tab\r\n */\r\nimport React from 'react';\r\nimport QualityExperience from './QualityExperience/QualityExperience';\r\n\r\n\r\nexport default function SimpleTabs() {\r\n   return (\r\n      <>\r\n         <QualityExperience />\r\n      </>\r\n   );\r\n}","import React from 'react'  \r\nimport QualityExperienceContainer from 'Components/QualityExperienceContainer'\r\n\r\nexport default function CrmDashboard(props){\r\n   return (\r\n      <div className=\"ecom-dashboard-wrapper 44\"> \r\n         <QualityExperienceContainer/>\r\n      </div>\r\n   )\r\n}\r\n"],"sourceRoot":""}